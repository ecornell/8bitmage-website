---
layout: page
title: "TFS: Application Lifecycle Management System"
#date: 2012-10-05 21:54
comments: true
sharing: true
footer: true
---

<!-- # TFS: Application Lifecycle Management System -->

The Information Technology Department (ITD) of North Dakota undertook an initiative to streamline the processes and artifacts used throughout their software development lifecycle.  The initial focus was strictly on the processes needed to successfully take a project from conception to implementation.  After the required processes and workflows were identified and a solid set of requirements laid out, the focus was then turned to tools.  The reasoning behind not involving tools into the initial discussions was to build a strong foundation of the necessary processes first.  The fear was that if tools were looked at first, they would dictate the implemented processes versus the requirements.  Once the foundation and requirements were considered solid, tools were then evaluated for the purpose of easing and automating the identified processes from the user’s perspective.  Microsoft’s Team Foundation Server (TFS) came to meet a majority of the requirements and was selected as the primary tool to support ITD’s application development lifecycle.  TFS is different from past tools used within ITD, in that it is brought up as a single shared system versus a set of individually deployed tools.  By integrating the management and workflow of the development processes into a single system, it has led to improvements in the quality of the implemented products.  The increased levels of traceability, visibility, and accountability in which TFS brought to the development process drove the improvements.

The primary requirements that led to the selection of TFS were based around providing a strong level of traceability of requirements throughout a project’s lifecycle.  Previously, requirements were collected and handled inconsistently on projects.  This inconsistency made it difficult to track and assess the impact of changes made in the later stages of projects.  Another requirement was to formalize the adherence of strong quality assurance practices within the lifecycle of projects.  These quality related needs included the ability to link test related artifacts to requirements and the ability to track issues and defects identified within projects.  Collaboration around the creation and review of artifacts was another requirement of the system.  Both internal collaboration between staff and external collaboration with the customer was difficult in the past because of the format in which artifacts and information was stored.  Many of the artifacts were standalone Word and Excel documents.  These formats worked acceptably on a small scale, but became a hindrance as the size of projects increased in both the number of resources assigned and artifacts maintained.

Now implemented, the TFS system is actively being utilized on projects across all of the development phases.  During the planning and analysis phases, TFS is utilized to directly capture and maintain both requirements and use case artifacts.  Other standalone analysis artifacts that need to remain in their native formats, like a Visio diagrams, are entered into TFS as linked artifacts.  The benefit of using linked artifacts is that they can then easily be associated with other artifacts, such as requirements, providing a high level of traceability.  During analysis, examples of linked artifacts include process models, a data dictionary, entity relationship diagrams, test plans, and conceptual architecture diagrams.  For the design phase, TFS is used to capture both the detail design specifications and test specifications, while the design prototypes, conceptual and logical data models, and logical architecture diagrams are stored as linked artifacts.  In the construction phase, currently only the test cases are entered into TFS.  For the testing phase, defect tracking is managed in TFS for both system integration and user acceptance testing.  At implementation and beyond, TFS continues to be utilized as the primary defect tracking system for applications as they enter a maintenance cycle.

The benefits seen since implementing TFS have been around the increased quality and management of projects.  The key to this improvement has been the emphasis on capturing solid requirements and tracing them through to implementation.  Training and experience are helping to improve the requirements, but TFS has provided the means to provide traceability across all artifacts quickly and with a minimal amount of maintenance.  With the improvements in traceability, the ability to verify the fulfillment of requirements in each phase has improved.  The communication to the customer has also improved with the ability to collaborate easily and early on artifacts.  This close collaboration has led to better requirement definitions, which in turn has led to a better agreement on the scope of projects.

Going forward, a couple of areas in which the usage of TFS will be looked to expand into are work unit management and trend reporting.  The use of work items within TFS to manage the construction phase of projects to the code level will be the next step in providing end-to-end traceability of requirements.  The integration of work units with the existing time management system and their alignment with the project schedules are also future objectives.  In the area of reporting, as the amount of project information increases the ability to data mine it for trends will be a prime area for expansion.  This trending information can also be leveraged to spot potential work effort and scheduling issues quicker.

In conclusion, the implementation of the Microsoft’s Team Foundation Server has allowed ITD to bring up a single system to facilitate and streamline the execution of their defined software development lifecycle.  The once disparate processes and tools were brought together into a unified system, allowing for improvements in efficiency and quality of the software produced.

- - -

Published: May 11, 2013
